require "import"
import "android.widget.*"
import "com.androlua.*"
import "android.view.View"
import "cjson"
import "android.content.Context"
import "android.os.Vibrator"
import "android.content.Intent"
import "android.net.Uri"
import "android.os.Environment"
import "java.io.FileOutputStream"
import "java.io.InputStream"
import "java.net.URL"
local context = service
local PREFS_NAME = "VideoDownloaderPrefs"
local prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
local vibrator = context.getSystemService(Context.VIBRATOR_SERVICE)
local currentVideoData = nil -- Variable para guardar datos del video actual
function vibrate(duration)
if vibrator then
vibrator.vibrate(duration or 100)
end
end
function loadQualityPreference()
return "mp4hd" -- Solo MP4 HD
end
function saveDownloadPath(path)
local editor = prefs.edit()
editor.putString("download_path", path)
editor.apply()
end
function loadDownloadPath()
local defaultPath = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getAbsolutePath() .. "/Descargador de YouTube MP4"
return prefs.getString("download_path", defaultPath)
end
function updateControlsVisibility()
pathButton.setVisibility(View.VISIBLE)
end
function formatBytes(bytes)
local kb = 1024
local mb = kb * 1024
local gb = mb * 1024
if bytes >= gb then
return string.format("%.2f GB", bytes / gb)
elseif bytes >= mb then
return string.format("%.2f MB", bytes / mb)
elseif bytes >= kb then
return string.format("%.2f KB", bytes / kb)
else
return bytes .. " bytes"
end
end
function formatDuration(seconds)
if seconds == 0 then return "Desconocida" end
local hours = math.floor(seconds / 3600)
local minutes = math.floor((seconds % 3600) / 60)
local secs = seconds % 60
if hours > 0 then
return string.format("%02d:%02d:%02d", hours, minutes, secs)
else
return string.format("%02d:%02d", minutes, secs)
end
end
function getVideoInfo(url, callback)
local apiUrl = "https://ytdown.ashlynn.workers.dev/notube?url=" .. url .. "&format=" .. loadQualityPreference()
Http.get(apiUrl, nil, function(code, content)
if code ~= 200 then
callback(nil, "Error al obtener informaci√≥n del video: " .. code)
else
local ok, response = pcall(cjson.decode, content)
if ok and response.success and response.data then
callback(response.data)
elseif ok and response.successful == "success" and response.data then
callback(response.data)
else
callback(nil, "Respuesta inv√°lida del servidor o video no disponible")
end
end
end)
end
function downloadVideo(videoData, callback)
local downloadUrl = videoData.url_mp4_youtube
if not downloadUrl then
callback(nil, "URL de descarga no disponible")
return
end
local fileName = videoData.name_mp4 or "video_descargado.mp4"
fileName = fileName:gsub("[^%w%s%._-]", "_")
fileName = fileName:gsub("%s+", "_") -- Reemplazar espacios con guiones bajos
local downloadPath = loadDownloadPath()
local file = luajava.newInstance("java.io.File", downloadPath)
if not file.exists() then
file.mkdirs()
end
local fullPath = downloadPath .. "/" .. fileName
showLoading("Descargando video... Por favor espera.")
Http.download(downloadUrl, fullPath, function(code, filePath)
if code == 200 then
callback(filePath)
else
callback(nil, "Error al descargar el video: " .. code)
end
end)
end
function showPathSelectionDialog()
vibrate(100)
local dialog = LuaDialog(service)
dialog.setTitle("Seleccionar carpeta de descarga")
local layout = LinearLayout(service)
layout.setOrientation(LinearLayout.VERTICAL)
layout.setPadding(50, 50, 50, 50)
local textView = TextView(service)
textView.setText("Ruta actual: " .. loadDownloadPath())
textView.setTextSize(14)
layout.addView(textView)
local editText = EditText(service)
editText.setText(loadDownloadPath())
layout.addView(editText)
local buttonLayout = LinearLayout(service)
buttonLayout.setOrientation(LinearLayout.HORIZONTAL)
local btnSave = Button(service)
btnSave.setText("Guardar")
btnSave.setOnClickListener{onClick = function()
vibrate(100)
local path = editText.getText().toString()
if path ~= "" then
saveDownloadPath(path)
Toast.makeText(service, "Ruta guardada", Toast.LENGTH_SHORT).show()
dialog.dismiss()
else
Toast.makeText(service, "Por favor ingrese una ruta v√°lida", Toast.LENGTH_SHORT).show()
end
end}
local btnClose = Button(service)
btnClose.setText("Cerrar")
btnClose.setOnClickListener{onClick = function()
vibrate(100)
dialog.dismiss()
end}
buttonLayout.addView(btnSave)
buttonLayout.addView(btnClose)
layout.addView(buttonLayout)
dialog.setView(layout)
dialog.show()
end
function openTelegramLink(url)
service.playSoundTick()
vibrate(150)
if dlg then
dlg.dismiss()
end
local intent = Intent(Intent.ACTION_VIEW)
intent.setData(Uri.parse(url))
service.startActivity(intent)
end
layout = {
LinearLayout,
orientation = "vertical",
layout_width = "fill",
layout_height = "fill",
padding = "16dp",
{
Button,
id = "pathButton",
text = "Cambiar carpeta de descarga",
layout_width = "fill",
layout_height = "wrap_content",
layout_marginBottom = "8dp",
},
{
Button,
id = "backButton",
text = "Navegar hacia atr√°s",
layout_width = "fill",
layout_height = "wrap_content",
layout_marginBottom = "16dp",
},
{
TextView,
text = "Ingresa tu enlace de YouTube:",
layout_width = "fill",
layout_height = "wrap_content",
textSize = "16sp",
padding = "8dp",
},
{
EditText,
id = "urlInput",
layout_width = "fill",
layout_height = "wrap_content",
padding = "12dp",
layout_marginBottom = "16dp",
},
{
Button,
id = "getInfoButton",
text = "Obtener informaci√≥n del video",
layout_width = "fill",
layout_height = "wrap_content",
layout_marginBottom = "16dp",
},
{
ScrollView,
layout_width = "fill",
layout_height = "0dp",
layout_weight = "1",
{
LinearLayout,
id = "infoLayout",
orientation = "vertical",
layout_width = "fill",
layout_height = "wrap_content",
{
TextView,
id = "statusText",
text = "Ingresa una URL de YouTube y presiona 'Obtener informaci√≥n del video'",
layout_width = "fill",
layout_height = "wrap_content",
padding = "12dp",
textSize = "14sp",
},
{
TextView,
id = "videoInfoText",
text = "",
layout_width = "fill",
layout_height = "wrap_content",
padding = "12dp",
textSize = "12sp",
visibility = "gone",
},
{
Button,
id = "downloadButton",
text = "Descargar video",
layout_width = "fill",
layout_height = "wrap_content",
layout_marginTop = "16dp",
visibility = "gone",
},
}
},
{
LinearLayout,
orientation = "vertical",
layout_width = "fill",
layout_height = "wrap_content",
layout_marginTop = "16dp",
{
Button,
id = "telegramButton1",
text = "Sigue a Plugin sin pacientes en Telegram",
layout_width = "fill",
layout_height = "wrap_content",
layout_marginBottom = "8dp",
},
{
Button,
id = "telegramButton2",
text = "Sigue a jieshuo Library en Telegram",
layout_width = "fill",
layout_height = "wrap_content",
},
}
}
dlg = LuaDialog(service)
dlg.setTitle("YouTube Video Downloader")
dlg.setView(loadlayout(layout))
updateControlsVisibility()
function isValidYouTubeUrl(url)
if not url or #url == 0 then
return false
end
return string.find(url, "youtube%.com") or string.find(url, "youtu%.be")
end
function showVideoInfo(videoData)
vibrate(200)
statusText.text = "Informaci√≥n del video:"
local title = videoData.titre_mp4 or videoData.name_mp4 or "T√≠tulo no disponible"
title = title:gsub("%%([0-9A-Fa-f][0-9A-Fa-f])", function(hex)
return string.char(tonumber(hex, 16))
end)
title = title:gsub("+", " ") -- Reemplazar + con espacios
local info = "üìπ " .. title .. "\n\n"
local sizeBytes = tonumber(videoData.weight_total or 0)
if sizeBytes > 0 then
info = info .. "üìè Tama√±o: " .. formatBytes(sizeBytes) .. "\n"
end
local duration = tonumber(videoData.VideoDuration or 0)
if duration > 0 then
info = info .. "‚è±Ô∏è Duraci√≥n: " .. formatDuration(duration) .. "\n"
end
info = info .. "üé¨ Formato: MP4 HD\n"
if videoData.token then
info = info .. "üîó Token: " .. videoData.token:sub(1, 8) .. "..."
end
videoInfoText.text = info
videoInfoText.visibility = View.VISIBLE
downloadButton.visibility = View.VISIBLE
currentVideoData = videoData
end
function showDownloadComplete(filePath)
vibrate(500) -- Vibraci√≥n m√°s larga para indicar descarga completada
statusText.text = "‚úÖ Descarga completada:"
videoInfoText.text = "üìÅ Archivo guardado en:\n" .. filePath .. "\n\nüéâ ¬°Listo para reproducir!"
videoInfoText.visibility = View.VISIBLE
downloadButton.visibility = View.GONE -- Ocultar bot√≥n de descarga
end
function showError(error)
vibrate(300)
statusText.text = "‚ùå Error: " .. error
videoInfoText.visibility = View.GONE
end
function showLoading(message)
statusText.text = "‚è≥ " .. message
videoInfoText.visibility = View.GONE
end
pathButton.onClick = function()
showPathSelectionDialog()
end
telegramButton1.onClick = function()
openTelegramLink("https://t.me/Pluginimpaciente")
end
telegramButton2.onClick = function()
openTelegramLink("https://t.me/Jieshuolibrary")
end
getInfoButton.onClick = function()
vibrate(100)
local url = urlInput.text
if not isValidYouTubeUrl(url) then
showError("Por favor ingresa una URL v√°lida de YouTube")
return
end
urlInput.setText("")
showLoading("Obteniendo informaci√≥n del video... Por favor espera.")
downloadButton.visibility = View.GONE -- Ocultar bot√≥n de descarga mientras se obtiene info
getVideoInfo(url, function(videoData, error)
if error then
showError(error)
else
showVideoInfo(videoData)
end
end)
end
downloadButton.onClick = function()
vibrate(100)
if not currentVideoData then
showError("No hay informaci√≥n de video disponible")
return
end
downloadVideo(currentVideoData, function(filePath, downloadError)
if downloadError then
showError(downloadError)
else
showDownloadComplete(filePath)
end
end)
end
backButton.onClick = function()
vibrate(200)
Toast.makeText(service, "Descargador de YouTube cerrado", Toast.LENGTH_SHORT).show()
dlg.dismiss()
end
dlg.show()